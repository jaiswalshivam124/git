…or create a new repository on the command line
echo "# git" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/jaiswalshivam124/git.git
git push -u origin main


…or push an existing repository from the command line
git remote add origin https://github.com/jaiswalshivam124/git.git
git branch -M main
git push -u origin main


#Doing add and commit in same command
git commit -am "Commit Message"

#Working Directory >>> Staging Area >>> Git Repo Local >>> Git Repo Global

#Configure Text Editor with Git 
~/.gitconfig  >>>  
[user]
	name = Shivam Jaiswal
	email = jaiswalshivam124@gmail.com
[core]
	editor = notepad++.exe -multiInst -nosession
  
#Removing File from staging area to working directory
git restore --staged $Filename

#Discard changes in working directory
git restore $Filename


#For renaming or moving use git mv command or git add -A command
if git add can't be used, them git add $filename 
and git add -u

#Get list of files that git is tracking
git ls-files

#Using Alias for any command
git config --global alias.hist "log --all --graph --decorate --oneline"

#Diff
git diff first second

#Branching
#Get the list of branches
git branch -a  //local+remote branches 

git branch $newbranchname
git checkout $branchname

#renaming branch
git branch -m oldb newb

#deleting branch
git branch -d $branchname

git checkout -b #branchname //checkout+creation

#Merging
git merge branchname //fast forward if no changes made to destination
git merge branchname --no-ff //nofast forward preserve the fact that branching was done
git merge branchname -m "message"

#Resolve git mergeconflicts
##Rebasing means you can have master changes applied to feature branch, it rewinds apply changes for master then feature thus flattening out history
# git rebase master // for rebasing
git rebase -- abort // aborting rebase
git rebase --continue // continue rebasing after conflict resolution

#git fetch origin master // update references
#git pull --rebase origin master //pull changes on local but have our own commit in local

#Stashing (saving any work in progress
git stash
git stash apply //to get back to working env
git stash list // list of files in stash
git stash drop //drop the last stash

git stash -u //for including untracked files to stash
@express command - git stash apply+git stash drop
			git stash pop
			
git stash save "multiple stash" //multiples stashes with name
git stash show stash@{0}
git stash apply stash@{0}
git stash drop stash@{0}
git stash clear //drop all stash 

git stash branch newbranch //create new branch, apply and drop stash

#Git Tagging
git tag myTag
git tag --list
git tag --delete myTag


#Annotated Tag
git tag -a $tagname //then enter tag details/description

#Tagging a previous commit
git tag -a myTag $CommitId

#Pushing tag to remote repo
git push origin $tagname

#Pushing commits as well as tags
git push origin master --tags

#Deleting a tag from remote repo
git push origin :$tagname

#To move between commits
git reset $commitID

#reflog
git reflog
